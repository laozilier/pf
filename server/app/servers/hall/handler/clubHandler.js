/** * Created by apple on 2017/9/18. */const hdw = require('../../../../common/handlerMiddleWare');class ClubHandler {    constructor(app) {        this.app = app;    }    //订阅俱乐部消息，俱乐部数据变动都会推送给此用户    async subscribe(params, session, next, userInfo, clubInfo) {        if (clubInfo) {            clubInfo.addChannel(session.uid, session.frontendId);            next(null, {code: STATE_CODE.OK});        } else {            next(null, {code: STATE_CODE.clubNotExist});        }    }    //成员列表    async members(params, session, next, userInfo, clubInfo) {        let array = await DBTOOLS.clubMembers(userInfo.cid, params.uid || 0, params.page || 1, params.size || 9);        next(null, {code: STATE_CODE.OK, result: array});    }    //设置管理员    async setAdmin(params, session, next, userInfo, clubInfo) {        if (!params.uid) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await DBTOOLS.setClubAdmin(userInfo.cid, session.uid, params.uid);        if (res.code === STATE_CODE.OK) {            clubInfo.setAdmin(params.uid);        }        next(null, res);    }    //设置俱乐部名字    async setName(params, session, next, userInfo, clubInfo) {        if (!params.name) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await DBTOOLS.setClubName(userInfo.cid, session.uid, params.name);        if (res.code === STATE_CODE.OK) {            clubInfo.setName(params.name);        }        next(null, res);    }    //包间列表    async privateRooms(params, session, next, userInfo, clubInfo) {        next(null, {            code: STATE_CODE.OK,            result: await clubInfo.getPrivateRooms()        });    }    //创建包间    async createPrivateRoom(params, session, next, userInfo, clubInfo) {        if (!params.rule) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await clubInfo.createPrivateRoom(session.uid, params.name, params.rule);        next(null, res);    }    //修改包间规则    async changePrivateRoom(params, session, next, userInfo, clubInfo) {        if (!params.prid || !params.rule) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await clubInfo.changePrivateRoom(session.uid, params.prid, params.rule);        next(null, res);    }    //修改包间名字    async changePrivateRoomName(params, session, next, userInfo, clubInfo) {        if (!params.prid) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await clubInfo.changePRName(session.uid, params.prid, params.name || "");        next(null, res);    }    //修改包间最大开桌数    async changePRMax(params, session, next, userInfo, clubInfo){        if (!params.prid) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await clubInfo.changePRMax(params.prid, params.max || 0);        next(null, {code: STATE_CODE.OK, result: res});    }    //删除包间    async deletePrivateRoom(params, session, next, userInfo, clubInfo) {        if (!params.prid) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await clubInfo.deletePrivateRoom(params.prid, session.uid);        next(null, res);    }    //单个俱乐部    async clubInfo(params, session, next, userInfo, clubInfo) {        //*********** 订阅俱乐部消息 ****************//        clubInfo.addChannel(session.uid, session.frontendId);        let result = clubInfo.info(session.uid);        //*********** 俱乐部包间规则 ****************//        result.privateRooms = await clubInfo.getPrivateRooms();        //*********** 俱乐部桌子列表 ****************//        result.tables = [];        for (let key in ROOMS.roomMap) {            if (ROOMS.roomMap[key].cid === userInfo.cid) {                let room = ROOMS.roomMap[key];                result.tables.push({                    rid: room.rid,                    prid: room.prid,                    seats: room.seats                });            }        }        next(null, {code: STATE_CODE.OK, result: result});    }    //解散俱乐部    async dismiss(params, session, next, userInfo, clubInfo) {        let cid = USERS.getUser(session.uid).cid;        // let res = await DBTOOLS.deleteClub(cid, session.uid);        next(null, {code: STATE_CODE.OK});    }    //黑名单操作    async blacklist(params, session, next, userInfo, clubInfo) {        if (!params.uid) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await DBTOOLS.setClubBlacklist(userInfo.cid, params.uid, session.uid);        if(res.code === STATE_CODE.OK){            //拉入黑名单需要踢出房间            if(res.blacklist === 1){                let room = ROOMS.getRoomByUid(params.uid);                if (room) {                    this.app.rpc.room.gameRemote.kickPlayer(room.serverId, room.rid, params.uid, (err, res) => {                    });                }            }            userInfo.clubBlacklist = !!res.blacklist;        }        next(null, res);    }    // 包间桌子数量    async tables(params, session, next, userInfo, clubInfo) {        let tablesInfo = [];        for (let key in ROOMS.roomMap) {            if (ROOMS.roomMap[key].cid === userInfo) {                let room = ROOMS.roomMap[key];                tablesInfo.push({                    rid: room.rid,                    prid: room.prid,                    seats: room.seats                });            }        }        next(null, {code: STATE_CODE.OK, result: tablesInfo});    }    //包间排序上移    async moveUpWeight(params, session, next, userInfo, clubInfo) {        if (!params.prid) {            return next(null, {code: STATE_CODE.lackOfParameters});        }        let res = await clubInfo.changePROrder(params.prid, !!params.moveUp);        next(null, {code: res ? STATE_CODE.OK : STATE_CODE.changePROrderFail});    }    //俱乐部今日数据    async statistic(params, session, next, userInfo){        let roomCount = 0;        let userCount = 0;        for (let key in ROOMS.roomMap) {            if (ROOMS.roomMap[key].cid === userInfo.cid) {                roomCount ++;            }        }        for(let key in USERS.map){            if(USERS.map[key].cid === userInfo.cid){                userCount ++;            }        }        let statistics = await DBTOOLS.clubStatistic(userInfo.cid);        next(null, {code: STATE_CODE.OK, result: {                statistics,                roomCount,                userCount            }});    }    //历史统计记录    async statisticHistory(params, session, next, userInfo, clubInfo){        let res = await DBTOOLS.statistics();        next(null, {code: STATE_CODE.OK, result: res});    }}module.exports = function (app) {    return hdw.handlerMiddleware(app, ClubHandler, hdw.clubMiddleWare);};