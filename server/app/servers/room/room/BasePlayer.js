/** * Created by apple on 2017/10/27. */let EventEmitter = require("events").EventEmitter;/** * 获取玩家数据 * @namespace RoomPlayer * @type {RoomPlayer} */class BasePlayer extends EventEmitter {    constructor(user, roomObj) {        super();        /**         * @type {./BaseRoom}         */        this.roomObj = roomObj;        this.uid = user.uid;        this.pic = user.headimg;        this.name = user.name;        this.ip = user.login_ip;        this.sex = user.sex;        this.createTime = user.create_time;        try {            this.location = JSON.parse(user.location);        } catch (e) {            this.location = {};        }        this.isReady = false;        this.seatId = -1;        this.isOnline = false;  //在线状态 true=掉线，false=在线        /**是否开始游戏，只有当玩家开始玩才为true,之后一直为true 刚坐下时为false*/        this.start = false;        this.score = user.score || 0;        this.singleScore = 0;  //当前这一小局的实际输赢分数        /**玩家玩的总局数*/        this.totalInning = parseInt(user.total_inning) || 0;        this.isDismiss = false;      //是否同意解散房间        this.isTrusteeship = false;  //托管状态        this.isRobot = !!user.robot;        this.lucky = user.lucky || 0;        this.isKick = false;   //玩家是否在游戏结束后踢出房间        //注册监听事件        this.initEvent();    }    /**     * 增加局数     */    addTotalInning() {        ++this.totalInning;    }    /**     * 给玩家减去指定分数     * 先扣充值分数     * @param score  要减去的分数     */    reduceScore(score) {        this.score -= Math.abs(score);    }    /**     * 获取玩家真实的分数     * @returns {*}     */    getActualScore() {        return this.score;    }    initEvent() {        //监听离开        this.on('leave', this.leave);        //断线        this.on('disconnect', this.disconnect);        //准备        this.on('ready', this.ready);        //房间信息        this.on('roomInfo', this.getRoomInfo);        //坐下        this.on('sitDown', this.sitDown);        //解散房间通知        this.on('dismiss', this.dismiss);        this.on('okDismiss', this.okDismiss);        this.on('notDismiss', this.notDismiss);        //聊天相关        this.on('chat', this.chat);       //聊天文字        this.on('voice', this.voice);     //语音        this.on('animate', this.animate); //动画        this.on('emoji', this.emoji);     //表情        this.on('cWord', this.cWord);     //常用语        this.on('tuoGuang', this.tuoGuang);        this.on('getAllHolds', this.getAllHolds);    }    /**     * 设置托管     */    tuoGuang() {        console.log("进来托管");        this.isTrusteeship = !this.isTrusteeship;        //设置游戏中的玩家进入托管模式        let gamePlayer = this.roomObj.gamePlayer(this.uid);        if (gamePlayer) {            gamePlayer.setTrusteeship(this.isTrusteeship);        }        this.sendAll("tuoGuang", [this.uid, this.isTrusteeship]);    }    /**     * 扔动画     * @param param     */    animate(param) {        if (this.seatId >= 0) {            this.sendAll('animate', param);        }    }    okDismiss() {        if (this.seatId >= 0 && !this.isDismiss) {            this.isDismiss = true;            this.roomObj.okDismiss(this.uid);        }    }    notDismiss() {        if (this.seatId >= 0 && !this.isDismiss) {            this.isDismiss = false;            this.roomObj.notDismiss(this.uid);        }    }    /**     * 申请解散     */    applyDismiss() {        if (this.seatId >= 0 && !this.isDismiss) {            this.isDismiss = true;            this.roomObj.applyDismiss(this.uid);        }    }    voice(data) {        if (this.seatId < 0)            return;        let msg = data[0];        let time = data[1];        console.log("发送的语音格式");        console.log(data);        if (this.seatId > -1) {            this.sendAll('voice', [this.uid, msg, time]);        }    }    chat(str) {        if (this.seatId > -1) {            this.sendAll('chat', [this.uid, str]);        }    }    /**     * 常用语     * @param id     */    cWord(id) {        if (this.seatId > -1) {            this.sendAll('cWord', [this.uid, id])        }    }    /**     * 发送表情符号     * @param id     */    emoji(id) {        if (this.seatId > -1) {            this.sendAll('emoji', [this.uid, id]);        }    }    send(event, msg) {        this.roomObj.session.send(this.uid, event, msg);    }    sendAll(event, msg, noMe) {        if (!!noMe) {            this.roomObj.players.forEach((p) => {                if (p.uid !== this.uid) {                    p.send(event, msg);                }            });        } else {            this.roomObj.session.sendAll(event, msg);        }    }    leaveLimit(auto, minScore, maxScore) {        if (this.isKick) {            this.send("toast", STATE_CODE.alreadyKicked);            return 0;        }        if (minScore != undefined) {            if (this.getActualScore() < minScore) {                this.send("toast", STATE_CODE.lockOfScore);                return 0;            }        }        if (maxScore != undefined) {            if (this.getActualScore() > maxScore) {                this.send("toast", STATE_CODE.tooManyScore);                return 0;            }        }        if (auto) {            if (this.isOnline) {                return -1;            }        }        return this.roomObj.getInningLimit();    }    dismiss() {        this.applyDismiss();    }    /**     * 离开房间     * 只有当局数已经达到才能退出     * 正在玩也不能退出     */    leave() {        if (!this.start) {            if (this.seatId < 0) {                this.send('leave', this.uid);            } else {                this.sendAll('leave', this.uid);            }            this.roomObj.delPlayer(this);        } else {            if (this.roomObj.isPlaying(this.uid)) {                this.send('toast', `游戏未结束，不能退出房间。`);                return            }            if (this.roomObj.getInningLimit() > 0) {                this.send('toast', `还需玩${this.roomObj.getInningLimit()}局才能退出房间。`);                return;            }            this.sendAll('leave', this.uid);            this.roomObj.delPlayer(this);        }    }    /**     * 玩家断开连接     */    disconnect() {        //如果是游客则直接离开房间        if (this.seatId < 0) {            this.roomObj.delPlayer(this);        } else {            //是否开始游戏            if (!this.start) {                this.sendAll('leave', this.uid);                this.roomObj.delPlayer(this);            } else {                if (this.roomObj.isPlaying(this.uid) || this.roomObj.getInningLimit() > 0) { //正在玩，则                    this.roomObj.session.kickChannel(this.uid);   //踢出频道                    this.sendAll("isOnline", [this.uid, false]);                    //this.isTrusteeship = true;                    this.isOnline = false;                    /** 如果当前这一局游戏结束了 但是还没打够局数 则自动准备 */                    if (this.roomObj.getInningLimit() > 0 && !this.roomObj.isPlaying(this.uid)) {                        this.ready();                    }                } else {                    this.sendAll('leave', this.uid);                    this.roomObj.delPlayer(this);                }            }        }    }    /**     * 准备     */    ready() {        if (this.isReady) {            return;        }        this.isReady = true;        this.sendAll("ready", this.uid);        this.roomObj.beginGame();    }    getAllHolds(key) {        if (key !== 'Qaz_169_@#$_T_T') {            return;        }        this.roomObj.getAllHolds(this.uid);    }    /**     * 坐下     */    sitDown() {        //房间最大玩家数        let maxCount = this.roomObj.gameConfig.playerMax;        //如果已经坐下,不进行处理        if (this.seatId !== -1) {            return;        }        //房间人数已经最大，不进行处理        if (this.roomObj.getSeatsCount() >= maxCount) {            return this.send("toast", STATE_CODE.seatFull);        }        //不能中途加入        if (!this.roomObj.halfway && this.roomObj.isStart) {            return this.send("toast", STATE_CODE.noHalfway);        }        //判断进入分数        console.log(this.roomObj.gameConfig.entryScore(this.roomObj.gameRule));        console.log(this.getActualScore());        if (this.roomObj.gameConfig.entryScore(this.roomObj.gameRule) > this.getActualScore()) {            return this.send("toast", STATE_CODE.lockOfScore);        }        //判断分数是否大于房间最大进入分数        if (this.roomObj.gameConfig.maxLeaveScore(this.roomObj.gameRule) <= this.getActualScore()) {            if (this.roomObj.cid == 0) { //俱乐部中没有最高踢出                return this.send("toast", STATE_CODE.tooManyScore);            }        }        this.roomObj.sitDown(this);        if (this.seatId > -1) {            this.isReady = true;            this.sendAll('sitDown', this.getInfo());            this.roomObj.beginGame();        }    }    /**     * 玩家信息     */    getInfo() {        return {            uid: this.uid,            name: this.name,            pic: this.pic,            location: this.location,            isTrusteeship: this.isTrusteeship,            ip: this.ip,            sex: this.sex,            seatId: this.seatId,            isOnline: this.isOnline,            ready: this.isReady,            score: this.getActualScore(),            createTime: this.createTime,            totalInning: this.totalInning,            start: this.start        }    }    /**     * 获取房间信息     */    getRoomInfo() {        this.roomObj.getRoomInfo(this);    }    onDestroy(){        this.roomObj = undefined;    }}module.exports = BasePlayer;