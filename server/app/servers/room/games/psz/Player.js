/** * Created by T-Vick on 2018/12/7. */let BasePlayer = require('../BasePlayer');const Status = require('../Status').jinhua;class Player extends BasePlayer{    constructor(main, uid){        super(main);        this.uid = uid;        this.holds = null;  //手持的牌        this.checkPattern = null;       //手上牌的金花值        this.score = 0;             //分数        this.timeoutId = -1;        this.amountFollow = 0; // 本局总跟注数，包括底        this.listFollow = [];        this.canFollow = true;        this.canMulti = true;        this.currMulti = 1;        this.canCompare = false;        this.canGamble = false; // 是否可以孤注一掷        this.canWaiver = false; // 有的必须焖多少轮之后才能弃权        this.isWaiver = false; // 是否已经弃权        this.isLoser = false; // 是否比牌失败        this.isOpenedCards = false; // 是否已经看牌        this.canOpenCards = false;        this.canMultiList = []; // 翻倍列表        // 是否可以设置自动跟        this.canAuto = true;        this.isAuto = false;        this.initEvent();    }    initEvent(){        this.on('setAuto', this.setAuto);        this.on('follow', this.follow);        this.on('waiver', this.waiver);        this.on('compare', this.compare);        this.on('openCards', this.openCards);        this.on('gamble', this.gamble);        // todo: 孤注一掷    }    setAuto(status){        // todo: 达到了上限，不能再设置自动跟        // if (this.main.uids[this.main.turn] != this.uid) {        //     console.log(`<setAuto> 还没轮到你，turn: ${this.main.turn}`);        //     return;        // }        if (!this.main.isStatus(Status.INGAME)) {            console.log(`<setAuto> 不在游戏中`);            return;        }        if (!this.canAuto && status) {            console.log(`<setAuto> 达到跟注轮数，不能再设置自动跟，canAuto: ${this.canAuto}`);            return;        }        if(this.isAuto !== status){            this.isAuto = !!status;            this.sendAll('auto', {uid: this.uid, isAuto: this.isAuto, canAuto: this.canAuto});        }        if (this.main.uids[this.main.turn] == this.uid) {            this.main.startTimeout(this.uid);        }    }    /**     * 发送给自己     */    getInfo(){        let data = {            isTrusteeship: this.isTrusteeship,            // 是否能设置自动跟            canAuto: this.canAuto,            // 是否自动跟            isAuto: this.isAuto,            // 是否可以弃权            canWaiver: this.canWaiver,            // 是否已经弃权            isWaiver: this.isWaiver,            isLoser: this.isLoser,            // 是否已经看牌            isOpenedCards: this.isOpenedCards,            canOpenCards: this.canOpenCards ,// 是否可以看牌            // 是否可以跟注            canFollow: false,            // 是否可以加注            canMulti: false,            // currMulti: this.currMulti,            // canMultiList: this.canMultiList,            // 是否可以比牌            canCompare: false,            // 是否可以孤注一掷            canGamble: this.canGamble,            // 本局总跟注数，包括底            amountFollow: this.amountFollow,            listFollow: this.listFollow,            holds: (this.isOpenedCards || this.main.isStatus(Status.END)) ? this.checkPattern.cards : null, // 看过牌才给手牌            pattern: (this.isOpenedCards || this.main.isStatus(Status.END)) ? this.checkPattern.pattern : null // 看过牌才给牌型        };        let isMyTurn = this.main.uids[this.main.turn] == this.uid;        if (isMyTurn) {            let actions = this.getActions();            data = Object.assign(data, actions);        }        return data;    }    /**     * 发送给其它玩家的信息     */    getOtherInfo(){        let data = {            isTrusteeship: this.isTrusteeship,            isAuto: this.isAuto,            // 是否已经弃权            isWaiver: this.isWaiver,            isLoser: this.isLoser,            // 是否已经看牌            isOpenedCards: this.isOpenedCards,            // 本局总跟注数，包括底            amountFollow: this.amountFollow,            listFollow: this.listFollow,            holds: this.main.isStatus(Status.END) ? this.checkPattern.cards : null, // 看过牌才给手牌            pattern: this.main.isStatus(Status.END) ? this.checkPattern.pattern : null // 看过牌才给牌型        };        return data;    }    getActions() {        let multiList = this.main.multiList.concat();        let currMulti = this.main.currMulti;        if (this.isOpenedCards) {            currMulti *= 2;            multiList = multiList.map((multi) => multi * 2);        }        this.currMulti = currMulti;        // todo: 跟随之前判断金币数量是否足够，金币不够通知他可以孤注一掷，然后将没弃权的玩家的牌值排个序        let leftCoins = this.main.getPlayerBalance(this.uid) - this.amountFollow;// 获取玩家剩余金币数量        let minFollow = currMulti * this.main.ante;        // todo: 金币不够或者已经加到最高倍数，则不能再加注        if (leftCoins < minFollow) {            //todo: 不能加注，看是否能够跟注            this.canFollow = false;            this.canCompare = false;            this.canMulti = false;            this.canMultiList = [];            // todo: 孤注一掷            this.canGamble = true;        } else if (multiList.indexOf(currMulti) == multiList.length - 1) {            this.canMulti = false;            this.canMultiList = [];        } else {            this.canMultiList = [];            let currMultiIndex = multiList.indexOf(currMulti);            let nextMulti = multiList[currMultiIndex + 1];            // let latestMulti = multiList[multiList.length - 1];            let minMulti = nextMulti * this.main.ante;            // let maxMulti = latestMulti * this.main.ante;            if (leftCoins <= minMulti) {                this.canMulti = false;                this.canMultiList = [];            } else {                for (let multi of multiList) {                    if (multi > currMulti) {                        let multiConins = multi * this.main.ante;                        if (leftCoins > multiConins) {                            this.canMultiList.push(multi);                        }                    }                }            }        }        // todo: 能不能比牌，也要看钱够不够        let compareCoins = minFollow * 2;        if (leftCoins < compareCoins) {            this.canCompare = false;        }        let compareUids = [];        if (this.canCompare) {            for (let p of this.main.players) {                if (p.uid != this.uid && !p.isWaiver) {                    compareUids.push(p.uid);                }            }        }        // 最大轮数到了，只能比牌或者弃牌，或者孤注一掷        if (this.main.currRound >= this.main.maxRound) {            this.canFollow = false;            this.canMulti = false;            if (!this.canCompare) {// 最大轮数到了，但是又不能比牌，就只能孤注一掷了                this.canGamble = true;            }        }        let data = {            canAuto: this.canAuto,            isAuto: this.isAuto,            canWaiver: this.canWaiver,            canFollow: this.canFollow,            // currMulti: currMulti,// 当前跟注倍数            // 当前第几轮跟注            currRound: this.main.currRound,            currMulti: this.main.currMulti, // 焖翻倍列表            // 是否可以加注            canMulti: this.canMulti,            // canMultiList: this.canMultiList,            // 是否可以比牌            canCompare: this.canCompare,            // 是否可以孤注一掷            canGamble: this.canGamble,            canOpenCards: this.canOpenCards,            isOpenedCards: this.isOpenedCards,            compareUids: compareUids        };        return data;    }    /**     * 打底/跟注/加注     * @param multi     * @param typeFollow     */    follow(multi, isDaDi) {        multi = parseInt(multi);        let originMulti = multi;        // console.log(`<follow> multi: ${multi}`);        if (!this.main.isStatus(Status.INGAME)) {            console.log(`<follow> 不在游戏中`);            return;        }        if (!isDaDi && this.main.uids[this.main.turn] != this.uid) {            console.log(`<follow> 还没轮到你，turn: ${this.main.turn}`);            return;        }        if (this.isWaiver || !(this.canFollow || this.canMulti)) {            console.log(`<follow> 不允许的操作，canFollow: ${this.canFollow}, canMulti: ${this.canMulti}, canGameble: ${this.canGamble}`);            return;        }        let multiList = this.main.multiList;        let currMulti = this.main.currMulti;        if (this.isOpenedCards) {            multi *= 2;            currMulti *= 2;            multiList = multiList.map((multi) => multi * 2);        }        if (isNaN(multi) || multiList.indexOf(multi) == -1 || multi < currMulti) {            console.log(`<follow> 参数错误，multi: ${multi}, isDaDi: ${isDaDi}, currMulti: ${currMulti}`);            return;        }        // todo: 跟随之前判断金币数量是否足够，金币不够通知他可以孤注一掷，然后将没弃权的玩家的牌值排个序        let leftCoins = this.main.getPlayerBalance(this.uid) - this.amountFollow;// 获取玩家剩余金币数量        // 孤注一掷        // if (this.canGamble) {        //     this.amountFollow += leftCoins;        //     this.listFollow.push(leftCoins);        //     this.main.coinPool += leftCoins;        //     this.main.currentAction = {        //         uid: this.uid,        //         action: 6,        //         data: {        //             amountFollow: this.amountFollow,        //             numFollow: leftCoins        //         }        //     };        //     this.sendAll('currentAction', this.main.currentAction);        //     this.main.doGameOver();        //     return;        // }        let numFollow = multi * this.main.ante;        if (leftCoins <= numFollow) {            console.log(`<follow> 金币不足，leftCoins: ${leftCoins}, numFollow: ${numFollow}`);            return;        }        let action = 1;        if (!isDaDi) {            if (multi == currMulti) {                action = 2;            } else {                action = 3;            }        }        this.amountFollow += numFollow;        this.listFollow.push(numFollow);        this.main.currMulti = originMulti;        this.main.coinPool += numFollow;        this.main.currentAction = {            uid: this.uid,            action: action,            data: {                amountFollow: this.amountFollow,                numFollow: numFollow,                coinPool: this.main.coinPool            }        };        this.sendAll('currentAction', this.main.currentAction);        if (!isDaDi) {            this.main.nextTurn();        }    }    /**     * 弃权     */    waiver() {        if (!this.main.isStatus(Status.INGAME)) {            console.log(`<waiver> 不在游戏中`);            return;        }        // 没轮到自己也能弃牌        // if (this.main.uids[this.main.turn] != this.uid) {        //     console.log(`<waiver> 还没轮到你，turn: ${this.main.turn}`);        //     return;        // }        if (!this.canWaiver) {            console.log(`<waiver> 不允许的操作，canWaiver: ${this.canWaiver}`);            return;        }        // todo: 弃牌之后要判断还剩下多少玩家，如果就剩一个人直接收钱，结束游戏        this.canAuto = false;        this.isAuto = false;        this.canWaiver = false;        this.isWaiver = true;        this.canFollow = false;        this.canMulti = false;        this.canCompare = false;        this.canOpenCards = false;        this.canGamble  = false;        let compareUids = [];        let turnPlayer = this.main.player(this.main.uids[this.main.turn]);        if (turnPlayer && turnPlayer.canCompare) {            for (let p of this.main.players) {                if (p.uid != turnPlayer.uid && !p.isWaiver) {                    compareUids.push(p.uid);                }            }        }        this.main.currentAction = {            uid: this.uid,            action: 0,            data: {                turn: turnPlayer ? turnPlayer.uid : null,                compareUids: compareUids            }        };        this.sendAll('currentAction', this.main.currentAction);        if (this.main.uids[this.main.turn] == this.uid) {            this.main.nextTurn();        } else {            // 判断游戏是否已经结束，牌之后如果只剩下一个人，则进入结算            if (this.main.isGameOver()) {                this.main.doGameOver();            }        }    }    /**     * 比牌     */    compare(uid) {        if (!this.main.isStatus(Status.INGAME)) {            console.log(`<compare> 不在游戏中`);            return;        }        // console.log(`<compare> source uid: ${this.uid}, target: ${uid}`);        if (this.main.uids[this.main.turn] != this.uid) {            console.log(`<compare> 还没轮到你，turn: ${this.main.turn}`);            return;        }        if (!this.canCompare) {            console.log(`<compare> 不允许的操作，canCompare: ${this.canCompare}`);            return;        }        let comPlayer = this.main.player(uid);        if (comPlayer.isWaiver) {            console.log(`<compare> 对方已经弃牌`);            this.send('compare', {status: 0});            return;        }        // 比牌要花钱 todo: 比牌后直接结束了，是否要2倍        let numFollow = this.main.currMulti * this.main.ante * 2;        if (this.isOpenedCards) {            numFollow *= 2;        }        this.amountFollow += numFollow;        this.listFollow.push(numFollow);        this.main.coinPool += numFollow;        // todo: 没看牌的玩家能不能参与比牌        // todo: 如果剩下的玩家多余2个选择一个要，与之比牌的玩家，否则直接比较然后结算        let pattern1 = this.checkPattern;        let target = this.main.player(uid);        let pattern2 = target.checkPattern;        let winner = 0;        let loser = 0;        if (((pattern1.pattern != 12 || pattern2.value != 1330) && pattern1.value > pattern2.value) || (pattern1.value == 1330 && pattern2.pattern == 12)) {            target.isWaiver = true;            target.canAuto = false;            target.isAuto = false;            target.canWaiver = false;            target.canFollow = false;            target.canMulti = false;            target.canOpenCards = false;            target.canCompare = false;            target.canGamble = false;            target.isLoser = true;            winner = this.uid;            loser = uid;        } else {            this.isWaiver = true;            this.canAuto = false;            this.isAuto = false;            this.canWaiver = false;            this.canFollow = false;            this.canMulti = false;            this.canOpenCards = false;            this.canCompare = false;            this.canGamble = false;            this.isLoser = true;            winner = uid;            loser = this.uid;        }        this.main.currentAction = {            uid: this.uid,            action: 5,            data: {                target: uid,                winner: winner, // todo: 比出赢家                loser: loser,                amountFollow: this.amountFollow, // 跟注总额                numFollow: numFollow, // 本次跟注数                coinPool: this.main.coinPool // 桌面总金额            }        };        this.sendAll('currentAction', this.main.currentAction);        // todo: 比牌时如果只剩下两个人，比完之后进入结算        this.main.nextTurn();    }    openCards() {        if (!this.main.isStatus(Status.INGAME)) {            console.log(`<openCards> 不在游戏中`);            return;        }        // 没轮到自己也能看牌        // if (this.main.uids[this.main.turn] != this.uid) {        //     console.log(`<openCards> 还没轮到你，turn: ${this.main.turn}`);        //     return;        // }        if (!this.canOpenCards) {            console.log(`<openCards> 不允许的操作，canOpenCards: ${this.canOpenCards}`);            return;        }        // 发送自己的手牌，并告诉别人我已经看牌        // todo: 手牌和牌型要发送过去        this.isOpenedCards = true;        this.canOpenCards = false;        this.main.currentAction = {            uid: this.uid,            action: 4,            data: {                amountFollow: this.amountFollow, // 跟注总额                numFollow: 0, // 本次跟注数                coinPool: this.main.coinPool,                cards: [],                pattern: this.checkPattern.pattern            }        };        this.sendAll('currentAction', this.main.currentAction);        this.send('currentAction', {            uid: this.uid,            action: 4,            data: Object.assign({                amountFollow: this.amountFollow, // 跟注总额                numFollow: 0, // 本次跟注数                coinPool: this.main.coinPool}, this.checkPattern)        });        if (this.main.uids[this.main.turn] == this.uid) {            this.main.nextTurn();        }    }    /**     * 孤注一掷     */    gamble() {        if (!this.main.isStatus(Status.INGAME)) {            console.log(`<gamble> 不在游戏中`);            return;        }        // console.log(`<compare> source uid: ${this.uid}, target: ${uid}`);        if (this.main.uids[this.main.turn] != this.uid) {            console.log(`<gamble> 还没轮到你，turn: ${this.main.turn}`);            return;        }        if (!this.canGamble) {            console.log(`<gamble> 不允许的操作，canGamble: ${this.canGamble}`);            return;        }        console.log(`<gamble>`);        // todo: 清除定时器        this.main.clearTimeout(this.main.operatTimeoutId);        // todo: 游戏状态，新增一个孤注一掷状态        // this.main.status = Status.GAMBLE;        // this.sendAll('gameStatus', {status: this.main.status});        let leftCoins = this.main.getPlayerBalance(this.uid) - this.amountFollow;        this.amountFollow += leftCoins;        this.main.coinPool += leftCoins;        this.listFollow.push(leftCoins);        // todo: 点击孤注一掷之后，清空此玩家的定时器！！！！！！！！！        // todo: 通知所有人，谁，孤注一掷， 扣除手上剩余的金币        this.main.currentAction = {            uid: this.uid,            action: 6,            data: {                amountFollow: this.amountFollow, // 跟注总额                numFollow: leftCoins, // 本次跟注数                coinPool: this.main.coinPool            }        };        this.sendAll('currentAction', this.main.currentAction);        // todo: 是否要禁用其它人的操作???        // todo: 延时等待孤注一掷动画播放完，然后按逆时针方向开始一家家比牌，        // todo: 只要自己比赢了比牌对象还没到自己，或者自己没弃牌，就一直比下去        let nextIndex = ++this.main.turn % this.main.uids.length;        let nextUid = this.main.uids[nextIndex];        // 孤注一掷动画延时        setTimeout(() => {            this.compareGamble(nextUid);        }, 2000);    }    compareGamble(target) {        // 如果被其他玩家弃牌结束游戏了，则不再进行孤注一掷的比牌        if (this.main.isStatus(Status.END)) {            return;        }        let targetPlayer = this.main.player(target);        // todo: 孤注一直期间，其他玩家弃牌，轮转不往下走        if (this.isWaiver) { // 孤注一掷玩家弃牌了（比输了），往下轮转            // this.main.status = Status.INGAME;            // this.sendAll('gameStatus', {status: this.main.status});            return this.main.nextTurn();        } else {            if (targetPlayer.isWaiver) {                let nextIndex = ++this.main.turn % this.main.uids.length;                let nextUid = this.main.uids[nextIndex];                return this.compareGamble(nextUid);            } else {                // todo: 实际的比牌                let pattern1 = this.checkPattern;                // let target = this.main.player(uid);                let pattern2 = targetPlayer.checkPattern;                let winner = 0;                let loser = 0;                if (pattern1.value > pattern2.value) {                    targetPlayer.isWaiver = true;                    targetPlayer.canAuto = false;                    targetPlayer.isAuto = false;                    targetPlayer.canWaiver = false;                    targetPlayer.canFollow = false;                    targetPlayer.canMulti = false;                    targetPlayer.canOpenCards = false;                    targetPlayer.canCompare = false;                    targetPlayer.canGamble = false;                    targetPlayer.isLoser = true;                    winner = this.uid;                    loser = target;                } else {                    this.isWaiver = true;                    this.canAuto = false;                    this.isAuto = false;                    this.canWaiver = false;                    this.canFollow = false;                    this.canMulti = false;                    this.canOpenCards = false;                    this.canCompare = false;                    this.canGamble = false;                    this.isLoser = true;                    winner = target;                    loser = this.uid;                }                this.sendAll('currentAction', {                    uid: this.uid,                    action: 5,                    data: {                        target: target,                        winner: winner, // todo: 比出赢家                        loser: loser,                        amountFollow: this.amountFollow, // 跟注总额                        numFollow: 0, // 本次跟注数，为0表示为孤注一掷的比牌                        coinPool: this.main.coinPool // 桌面总金额                    }                });                // 每比完一家判断游戏是否结束                if (this.main.isGameOver()) {                    return this.main.doGameOver();                }                // 比牌之后，还没有结束，延时继续下一次比牌                let nextIndex = ++this.main.turn % this.main.uids.length;                let nextUid = this.main.uids[nextIndex];                return setTimeout(() => {                    this.compareGamble(nextUid);                }, 4300);            }        }    }}module.exports = Player;