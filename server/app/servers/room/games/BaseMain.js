/** * Created by apple on 2017/11/1. */const Class = require('../../../../common/TimeoutClass');class BaseMain extends Class{    constructor(room){        super();        /**         *  房间对象         * @type {GameRoom}         */        this.room = room;        this.players = [];        this.uids = [];    }    send(uid, event, msg){        let p = this.room.player(uid);        p && p.send(event, msg);    }    sendAll(event, msg) {        this.room.session.sendAll(event, msg);    }    player(uid){        for(let i = 0; i < this.players.length; ++i){            if(this.players[i].uid == parseInt(uid)){                return this.players[i];            }        }        return null;    }    /**     * 获取本小局所有玩家的分数     * 如果有中途分数变化，必须在这里处理     * @returns {Array} 返回所有玩家的分数     */    getAllScores(){        let scores = [];        this.players.forEach((player) => {            scores.push(player.score + player.halfwayScore);        });        return scores;    }    /**     * 单局游戏输赢分数结果     */    getScoreResult(){        let scores = {win: {}, lose: {}};        this.players.forEach((player) => {            if(player.score >= 0){                scores.win[player.uid] = Math.abs(player.score);            } else {                scores.lose[player.uid] = Math.abs(player.score);            }        });        return scores;    }    /**     * 回放数据     * @returns {Object}     */    getPlayback(){        return {};    }    /**     * 分数推送到数据库中     * @returns {Object} 包含每个玩家分数变化数据     */    pushScore(){        return this.room.pushScore();    }    /**     * 此方法可以控制在游戏结束时解散房间     * 如果需要控制解散房间，子类必须重新实现     * 如果不需要控制解散房间，则不用实现此方法     * @returns {boolean}  true = 结束游戏时，同时解散房间，false = 不解散房间     */    isEnd(){        return false;    }    /**     * 获取持久层对象     * @returns {Object}     */    getLasting(){        return this.room.sd;    }    /**     * 持久层对象     * @returns {./BaseLasting}     */    get lasting(){        return this.room.sd;    }    /**     * 结束本小局战斗     * 如果调用此方法，则room层会直接释放此对象     * @param historyRecord     */    end(){        this.room.saveHistory();    }    /**     * 释放本小局游戏<br>     * 如果调用了此方法，当前这局游戏将会结束，所有玩家进入待准备状态     */    releaseGame(){        this.room.saveHistory();    }    onDestroy() {        super.onDestroy();        this.players = [];        this.room = undefined;    }}module.exports = BaseMain;