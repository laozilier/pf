/** * * 大小顺序 * 0点-9点: 0-9 * 二八杠: 80  倍数: 2 * 豹子: 90  倍数: 3 * 红中对: 100  倍数: 5 * * * * * 牛牛返回结果 * { *  type:10,   代表牛类型 *  pai:32,    最大的一张牌, 如果是炸弹牛，则是炸弹那张牌 *  result:[], 结果牌，算出牛的两张牌 * } * * Created by apple on 2017/9/29. */module.exports = {    /**     * 发牌     * @return {Object}     */    deal:function () {        let cards = [];        for (let i = 1; i < 9; i++) {            for (let j = 0; j < 2; j++) {                cards.push(j*10+i);            }        }        for (let i = 0; i < 10; ++i){            let i = parseInt(Math.random() * cards.length);            let j = parseInt(Math.random() * cards.length);            let n = cards[i];            cards[i] = cards[j];            cards[j] = n;        }        let chess = [];        for (let i = 0; i < 4; i++) {            let a = [];            for (let j = 0; j < 4; j++) {                a.push(cards[i*4+j]);            }            chess.push(a);        }        return chess;    },    /**     * 比较大小     * @param leftValue     * @param rightValue     * @returns {number}     */    compareCards: function(from, to){        let fromValue = from%10;        let toValue = to%10;        if (fromValue == toValue) {            return 0;        }        if (fromValue < toValue) {            if (fromValue == 1 && toValue == 8) {                return 1;            }            return -1;        }        if (fromValue > toValue) {            if (fromValue == 8 && toValue == 1) {                return -1;            }            return 1;        }        return 0;    },    erweiToYiwei(row, col) {        return row*4+col;    },    isNear(fromrow, fromcol, torow, tocol) {        if (fromrow == torow) {            if (Math.abs(fromcol-tocol) == 1) {                return true;            }        }        if (fromcol == tocol) {            if (Math.abs(fromrow-torow) == 1) {                return true;            }        }        return false;    },};