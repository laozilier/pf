/** * Created by THB on 2017/12/19. * 管理定时器，统一释放定时器 * 如果需要使用定时器，请使用本对象的setTimeout与setInterval方法 * 当对象释放时，需要调用onDestroy,否则无法释放setTimeout与setInterval */let EventEmitter = require("events").EventEmitter;class TimeoutClass extends EventEmitter{    constructor(){        super();        this.timeoutList = [];        this.intervalList = [];    }    onDestroy(){        this.timeoutList.forEach(function (id) {            clearTimeout(id);        }, this);        this.intervalList.forEach(function (id) {            clearInterval(id);        }, this);        this.timeoutList = [];        this.intervalList = [];    }    /**     * 设置延时定时器, 此定时器在执行完回调后，会自动释放     * @param {Function}  cb -   回调     * @param {Number}   [delay] 延时时间 (单位:毫秒)     * @param {[]} [args]    args  回调的参数     * @return {Object}   定时器对象     */    setTimeout(cb, delay, args){        let self = this;        if(isNaN(delay)){            delay = 1000;        }        if(!cb){            return null;        }        let id = setTimeout(function () {            cb.apply(self, args);            self.clearTimeout(id);        }, delay);        this.timeoutList.push(id);        return id;    }    /**     * 设置周期定时器     * @param {function}   cb     * @param {number}     delay  延时(单位: 毫秒)     * @param {number}     repeat 重复次数,默认-1，-1无限次     * @param {Array} [args]      args   传给回调函灵数的参数     * @return {Object}     */    setInterval(cb, delay, repeat, args){        let self = this;        let count = 0;        if(!cb)            return null;        //检查参数        if(isNaN(repeat) || repeat === 0){            repeat = 1;        }        if(isNaN(delay)){            delay = 0;        }        let id = setInterval(function () {            cb.apply(self, args);            ++count;            if(count >= repeat){                self.clearInterval(id);            }        }, delay);        this.intervalList.push(id);        return id;    }    /**     * 删除延时定时器     * @param id 定时器对象     */    clearTimeout(id){        clearTimeout(id);        let i = this.timeoutList.indexOf(id);        i > -1 && this.timeoutList.splice(i, 1);    }    /**     * 删除周期定时器     * @param id 定时器对象     */    clearInterval(id){        clearInterval(id);        let i = this.intervalList.indexOf(id);        i > -1 && this.intervalList.splice(i, 1);    }}module.exports = TimeoutClass;